<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tamir.IPLib.SharpPcap</name>
    </assembly>
    <members>
        <member name="T:SupportClass">
            <summary>
            Contains conversion support elements such as classes, interfaces and static methods.
            </summary>
        </member>
        <member name="M:SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:SupportClass.ToByteArray(System.Object[])">
            <summary>
            Converts a array of object-type instances to a byte-type array.
            </summary>
            <param name="tempObjectArray">Array to convert.</param>
            <returns>An array of byte type elements.</returns>
        </member>
        <member name="M:SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="T:Tamir.IPLib.Packets.PacketFactory">
            <summary> This factory constructs high-level packet objects from
            captured data streams.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.12 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2004/05/05 23:14:45 $ </lastModifiedAt>
        </member>
        <member name="M:Tamir.IPLib.Packets.PacketFactory.dataToPacket(System.Int32,System.Byte[])">
            <summary> Convert captured packet data into an object.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.PacketFactory.dataToPacket(System.Int32,System.Byte[],Tamir.IPLib.Packets.Util.Timeval)">
            <summary> Convert captured packet data into an object.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.PacketFactory.lLen">
            <summary> Length in bytes of the link-level headers that this factory is 
            decoding packets for.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.LinkLayers_Fields" -->
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.NULL">
            <summary> no link-layer encapsulation </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.EN10MB">
            <summary> Ethernet (10Mb) </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.EN3MB">
            <summary> Experimental Ethernet (3Mb) </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.AX25">
            <summary> Amateur Radio AX.25 </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.PRONET">
            <summary> Proteon ProNET Token Ring </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.CHAOS">
            <summary> Chaos </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.IEEE802">
            <summary> IEEE 802 Networks </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.ARCNET">
            <summary> ARCNET </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.SLIP">
            <summary> Serial Line IP </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.PPP">
            <summary> Point-to-point Protocol </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.FDDI">
            <summary> FDDI </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.ATM_RFC1483">
            <summary> LLC/SNAP encapsulated atm </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.RAW">
            <summary> raw IP </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.SLIP_BSDOS">
            <summary> BSD Slip.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.PPP_BSDOS">
            <summary> BSD PPP.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.ATM_CLIP">
            <summary> IP over ATM.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.PPP_SERIAL">
            <summary> PPP over HDLC.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.CHDLC">
            <summary> Cisco HDLC.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.IEEE802_11">
            <summary> IEEE 802.11 wireless.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.LOOP">
            <summary> OpenBSD loopback.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.LINUX_SLL">
            <summary> Linux cooked sockets.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayers_Fields.UNKNOWN">
            <summary> unknown link-layer type</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.IPAddress" -->
        <member name="F:Tamir.IPLib.Packets.IPAddress.WIDTH">
            <summary> The width in bytes of an IP address.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPAddress.toString(System.Int32)">
            <summary> Convert an IP address stored in an int to its string representation.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPAddress.extract(System.Int32,System.Byte[])">
            <summary> Extract a string describing an IP address from an array of bytes.
            
            </summary>
            <param name="offset">the offset of the address data.
            </param>
            <param name="bytes">an array of bytes containing the IP address.
            </param>
            <returns> a string of the form "255.255.255.255"
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPAddress.ipToLong(System.String)">
            <param name="dottedIP">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPAddress.random">
            <summary> Generate a random IP number between 0.0.0.0 and 255.255.255.255.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPAddress.random(System.Int32,System.Int32)">
            <summary> Generate a random IP address.</summary>
            <param name="network">the network number. i.e. 0x0a000000.
            </param>
            <param name="mask">the network mask. i.e. 0xffffff00.
            </param>
            <returns> a random IP address on the specified network.
            </returns>
        </member>
        <member name="T:Tamir.IPLib.Packets.ARPFields_Fields">
            <summary> IP protocol field encoding information.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.3 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2001/06/27 01:46:59 $ </lastModifiedAt>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_ETH_ADDR_CODE">
            <summary> Type code for ethernet addresses.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_IP_ADDR_CODE">
            <summary> Type code for MAC addresses.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_OP_REQ_CODE">
            <summary> Code for ARP request.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_OP_REP_CODE">
            <summary> Code for ARP reply.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_OP_LEN">
            <summary> Operation type length in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_ADDR_TYPE_LEN">
            <summary> Address type length in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_ADDR_SIZE_LEN">
            <summary> Address type length in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_HW_TYPE_POS">
            <summary> Position of the hardware address type.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_PR_TYPE_POS">
            <summary> Position of the protocol address type.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_HW_LEN_POS">
            <summary> Position of the hardware address length.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_PR_LEN_POS">
            <summary> Position of the protocol address length.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_OP_POS">
            <summary> Position of the operation type.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_S_HW_ADDR_POS">
            <summary> Position of the sender hardware address.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_S_PR_ADDR_POS">
            <summary> Position of the sender protocol address.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_T_HW_ADDR_POS">
            <summary> Position of the target hardware address.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_T_PR_ADDR_POS">
            <summary> Position of the target protocol address.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ARPFields_Fields.ARP_HEADER_LEN">
            <summary> Total length in bytes of an ARP header.</summary>
        </member>
        <member name="T:Tamir.IPLib.PcapOfflineDevice">
            <summary>
            Capture packets from an offline pcap file
            </summary>
        </member>
        <member name="T:Tamir.IPLib.PcapDevice">
            <summary>
            Capture live packets from a network device
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Tamir.IPLib.PcapDevice.#ctor(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Tamir.IPLib.PcapDevice.#ctor(Tamir.IPLib.SharpPcap.PCAP_IF)" -->
        <member name="M:Tamir.IPLib.PcapDevice.#ctor">
            <summary>
            Default contructor for subclasses
            </summary>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapOpen">
            <summary>
            Open the device with default values of: promiscuous_mode=false, read_timeout=1000
            To start capturing call the 'PcapStartCapture' function
            </summary>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapOpen(System.Boolean)">
            <summary>
            Open the device. To start capturing call the 'PcapStartCapture' function
            </summary>
            <param name="promiscuous_mode">A value indicating wether to open the
             device in promiscuous mode (true = capture *all* packets on the network,
             including packets not for me)</param>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapOpen(System.Boolean,System.Int32)">
            <summary>
            Open the device. To start capturing call the 'PcapStartCapture' function
            </summary>
            <param name="promiscuous_mode">A value indicating wether to open the
             device in promiscuous mode (true = capture *all* packets on the network,
             including packets not for me)</param>
            <param name="read_timeout">The timeout in miliseconds to wait for a  packet arrival</param>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapStartCapture">
            <summary>
            Starts the capturing process
            </summary>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapCapture(System.Int32)">
            <summary>
            Captures packets on this network device. This method will block
            until capturing is finished.
            </summary>
            <param name="packetCount">The number of packets to be captured. 
            Value of '-1' means infinite.</param>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapStopCapture">
            <summary>
            Stops the capture process
            </summary>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapClose">
            <summary>
            Closes this adapter
            </summary>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapGetNextPacket">
            <summary>
            Gets the next packet captured on this device
            </summary>
            <returns>The next packet captured on this device</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Tamir.IPLib.PcapDevice.PcapGetNextPacket(Tamir.IPLib.Packets.Packet@)" -->
        <member name="M:Tamir.IPLib.PcapDevice.PcapCaptureLoop">
            <summary>
            The capture procedure
            </summary>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapSetFilter(System.String)">
            <summary>
            Compile a kernel level filtering expression, and associate the filter 
            with this device. For more info on filter expression syntax, see:
            http://www.winpcap.org/docs/docs31/html/group__language.html
            </summary>
            <param name="filterExpression">The filter expression to 
            compile</param>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapDumpOpen(System.String)">
            <summary>
            Opens a file for packet writings
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapDumpClose">
            <summary>
            Closes the opened dump file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapDumpFlush">
            <summary>
            Flushes all write buffers of the opened dump file
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapDump(System.Byte[],Tamir.IPLib.PcapHeader)">
            <summary>
            Writes a packet to the pcap dump file associated with this device.
            </summary>
            <param name="p">The packet to write</param>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapDump(System.Byte[])">
            <summary>
            Writes a packet to the pcap dump file associated with this device.
            </summary>
            <param name="p">The packet to write</param>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapDump(Tamir.IPLib.Packets.Packet)">
            <summary>
            Writes a packet to the pcap dump file associated with this device.
            </summary>
            <param name="p">The packet to write</param>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapSendPacket(Tamir.IPLib.Packets.Packet)">
            <summary>
            Sends a raw packet throgh this device
            </summary>
            <param name="p">The packet to send</param>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapSendPacket(Tamir.IPLib.Packets.Packet,System.Int32)">
            <summary>
            Sends a raw packet throgh this device
            </summary>
            <param name="p">The packet to send</param>
            <param name="size">The number of bytes to send</param>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapSendPacket(System.Byte[])">
            <summary>
            Sends a raw packet throgh this device
            </summary>
            <param name="p">The packet bytes to send</param>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapSendPacket(System.Byte[],System.Int32)">
            <summary>
            Sends a raw packet throgh this device
            </summary>
            <param name="p">The packet bytes to send</param>
            <param name="size">The number of bytes to send</param>
        </member>
        <member name="M:Tamir.IPLib.PcapDevice.PcapSendQueue(Tamir.IPLib.PcapSendQueue,System.Boolean)">
            <summary>
            Sends all packets in a 'PcapSendQueue' out this pcap device
            </summary>
            <param name="q">The 'PcapSendQueue' hodling the packets</param>
        </member>
        <!-- Badly formed XML comment ignored for member "E:Tamir.IPLib.PcapDevice.PcapOnPacketArrival" -->
        <!-- Badly formed XML comment ignored for member "E:Tamir.IPLib.PcapDevice.PcapOnPcapStatistics" -->
        <member name="E:Tamir.IPLib.PcapDevice.PcapOnCaptureStopped">
            <summary>
            Fired when the capture process of this pcap device is stopped
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapDevice.PcapName">
            <summary>
            Gets the pcap name of this network device
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapDevice.PcapDescription">
            <summary>
            Gets the pcap description of this device
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapDevice.PcapHandle">
            <summary>
            The underlying pcap device handle
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapDevice.PcapDataLink">
            <summary>
            Return the pcap link layer value of an adapter. 
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapDevice.PcapOpened">
            <summary>
            Return a value indicating if this adapter is opened
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapDevice.PcapStarted">
            <summary>
            Return a value indicating if the capturing process of this adapter is started
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapDevice.PcapDumpOpened">
            <summary>
            Gets a value indicating wether pcap dump file is already associated with this device
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapDevice.PcapLastError">
            <summary>
            The last pcap error associated with this pcap device
            </summary>
        </member>
        <member name="F:Tamir.IPLib.PcapOfflineDevice.PCAP_OFFLINE_DESCRIPTION">
            <summary>
            The description of this device
            </summary>
        </member>
        <member name="M:Tamir.IPLib.PcapOfflineDevice.#ctor(System.String)">
            <summary>
            Constructs a new offline device for reading 
            pcap files
            </summary>
            <param name="pcapFile"></param>
        </member>
        <member name="M:Tamir.IPLib.PcapOfflineDevice.PcapOpen">
            <summary>
            Opens the device for capture
            </summary>
        </member>
        <member name="M:Tamir.IPLib.PcapOfflineDevice.PcapOpen(System.Boolean)">
            <summary>
            Opens the device for capture
            </summary>
            <param name="promiscuous_mode">This parameter
            has no affect on this method since it's an 
            offline device</param>
        </member>
        <member name="M:Tamir.IPLib.PcapOfflineDevice.PcapOpen(System.Boolean,System.Int32)">
            <summary>
            Opens the device for capture
            </summary>
            <param name="promiscuous_mode">This parameter
            has no affect on this method since it's an 
            offline device</param>
            <param name="read_timeout">This parameter
            has no affect on this method since it's an 
            offline device</param>
        </member>
        <member name="M:Tamir.IPLib.PcapOfflineDevice.PcapSetFilter(System.String)">
            <summary>
            Setting a capture filter on this offline device is not supported
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapOfflineDevice.PcapFileName">
            <summary>
            The underlying pcap file name
            </summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.ICMPMessage">
            <summary> ICMP message utility class.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.4 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2001/06/20 06:24:37 $ </lastModifiedAt>
        </member>
        <member name="M:Tamir.IPLib.Packets.ICMPMessage.getDescription(System.Int32)">
            <summary> Fetch an ICMP message.</summary>
            <param name="code">the code associated with the message.
            </param>
            <returns> a message describing the significance of the ICMP code.
            </returns>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessage.messages">
            <summary> 'Human-readable' ICMP messages.</summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.ICMPFields_Fields">
            <summary> ICMP protocol field encoding information.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.5 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2001/07/30 00:01:22 $ </lastModifiedAt>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPFields_Fields.ICMP_CODE_LEN">
            <summary> Length of the ICMP message type code in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPFields_Fields.ICMP_SUBC_LEN">
            <summary> Length of the ICMP subcode in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPFields_Fields.ICMP_CSUM_LEN">
            <summary> Length of the ICMP header checksum in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPFields_Fields.ICMP_CODE_POS">
            <summary> Position of the ICMP message type.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPFields_Fields.ICMP_SUBC_POS">
            <summary> Position of the ICMP message subcode.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPFields_Fields.ICMP_CSUM_POS">
            <summary> Position of the ICMP header checksum.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPFields_Fields.ICMP_HEADER_LEN">
            <summary> Length in bytes of an ICMP header.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.ARPPacket" -->
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.EthernetPacket" -->
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.Packet" -->
        <member name="P:Tamir.IPLib.Packets.Packet.Header">
            <summary> Fetch data portion of the packet.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.Packet.Data">
            <summary> Fetch data portion of the packet.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Tamir.IPLib.Packets.EthernetPacket.#ctor(System.Int32,System.Byte[])" -->
        <member name="M:Tamir.IPLib.Packets.EthernetPacket.#ctor(System.Int32,System.Byte[],Tamir.IPLib.Packets.Util.Timeval)">
            <summary> Construct a new ethernet packet, including the capture time.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.EthernetPacket.ToString">
            <summary> Convert this ethernet packet to a readable string.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.EthernetPacket.ToColoredString(System.Boolean)">
            <summary> Generate string with contents describing this ethernet packet.</summary>
            <param name="colored">whether or not the string should contain ansi
            color escape sequences.
            </param>
        </member>
        <member name="P:Tamir.IPLib.Packets.EthernetPacket.EthernetHeaderLength">
            <summary> Fetch the ethernet header length in bytes.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.EthernetPacket.HeaderLength">
            <summary> Fetch the packet ethernet header length.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.EthernetPacket.EthernetHeader">
            <summary> Fetch the ethernet header as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.EthernetPacket.Header">
            <summary> Fetch the ethernet header as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.EthernetPacket.EthernetData">
            <summary> Fetch the ethernet data as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.EthernetPacket.EthernetProtocol">
            <summary> Fetch the ethernet protocol.</summary>
            <summary> Sets the ethernet protocol.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.EthernetPacket.Timeval">
            <summary> Fetch the timeval containing the time the packet arrived on the 
            device where it was captured.
            </summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.EthernetPacket.Color">
            <summary> Fetch ascii escape sequence of the color associated with this packet type.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.EthernetPacket.Data">
            <summary> Fetch the ethernet data as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.EthernetPacket.SourceHwAddress">
            <summary> Fetch the MAC address of the host where the packet originated from.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.EthernetPacket.SourceHwAddressAsLong">
            <summary> Set the MAC address of the host where the packet originated from.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.EthernetPacket.DestinationHwAddress">
            <summary> Fetch the MAC address of the host where the packet originated from.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.EthernetPacket.DestinationHwAddressAsLong">
            <summary> Set the MAC address of the host where the packet originated from.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.ARPPacket.#ctor(System.Int32,System.Byte[])">
            <summary> Create a new ARP packet.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.ARPPacket.#ctor(System.Int32,System.Byte[],Tamir.IPLib.Packets.Util.Timeval)">
            <summary> Create a new ARP packet.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.ARPPacket.getARPSenderHwAddress">
            <summary> Fetch the hardware source address.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.ARPPacket.setARPSenderHwAddress(System.String)">
            <summary> Sets the hardware source address.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.ARPPacket.setARPSenderHwAddress(System.Int64)">
            <summary> Sets the hardware source address.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.ARPPacket.getARPTargetHwAddress">
            <summary> Fetch the hardware destination address.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.ARPPacket.setARPTargetHwAddress(System.String)">
            <summary> Sets the hardware destination address.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.ARPPacket.setARPTargetHwAddress(System.Int64)">
            <summary> Sets the hardware destination address.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.ARPPacket.ToString">
            <summary> Convert this ARP packet to a readable string.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.ARPPacket.ToColoredString(System.Boolean)">
            <summary> Generate string with contents describing this ARP packet.</summary>
            <param name="colored">whether or not the string should contain ansi
            color escape sequences.
            </param>
        </member>
        <member name="P:Tamir.IPLib.Packets.ARPPacket.ARPOperation">
            <summary> Fetch the operation code.
            Usually one of ARPFields.{ARP_OP_REQ_CODE, ARP_OP_REP_CODE}.
            </summary>
            <summary> Sets the operation code.
            Usually one of ARPFields.{ARP_OP_REQ_CODE, ARP_OP_REP_CODE}.
            </summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ARPPacket.ARPSenderHwAddressAsLong">
            <summary> Fetch the hardware source address.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ARPPacket.ARPSenderProtoAddress">
            <summary> Fetch the proto sender address.</summary>
            <summary> Sets the proto sender address.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ARPPacket.ARPTargetProtoAddress">
            <summary> Fetch the proto sender address.</summary>
            <summary> Sets the proto sender address.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ARPPacket.ARPHeader">
            <summary> Fetch the arp header, excluding arp data payload.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ARPPacket.ARPData">
            <summary> Fetch data portion of the arp header.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ARPPacket.Header">
            <summary> Fetch the arp header, excluding arp data payload.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ARPPacket.Color">
            <summary> Fetch ascii escape sequence of the color associated with this packet type.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ARPPacket.Data">
            <summary> Fetch data portion of the arp header.</summary>
        </member>
        <member name="T:Tamir.IPLib.PcapDeviceList">
            <summary>
            Summary description for PcapDeviceList.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.PacketEncoding" -->
        <member name="M:Tamir.IPLib.Packets.PacketEncoding.extractHeader(System.Int32,System.Int32,System.Byte[])">
            <summary> Extract a header from a packet.
            
            </summary>
            <param name="offset">the offset in bytes to the start of the embedded header.
            </param>
            <param name="headerLen">the length of the header embedded in the packet.
            </param>
            <param name="bytes">the packet data, including the embedded header and data.
            </param>
            <returns> the extracted header data.
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.PacketEncoding.extractData(System.Int32,System.Int32,System.Byte[])">
            <summary> Extract data from a packet.
            
            </summary>
            <param name="offset">the offset in bytes to the start of the embedded header.
            </param>
            <param name="headerLen">the length of the header embedded in the packet.
            </param>
            <param name="bytes">the packet data, including the embedded header and data.
            </param>
            <returns> the extracted packet data.
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.PacketEncoding.extractData(System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary> Extract data from a packet.
            
            </summary>
            <param name="offset">the offset in bytes to the start of the embedded header.
            </param>
            <param name="headerLen">the length of the header embedded in the packet.
            </param>
            <param name="bytes">the packet data, including the embedded header and data.
            </param>
            <returns> the extracted packet data.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.MACAddress" -->
        <member name="F:Tamir.IPLib.Packets.MACAddress.WIDTH">
            <summary> The width in bytes of a MAC address.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.MACAddress.extract(System.Int32,System.Byte[])">
            <summary> Extract a MAC address from an array of bytes.</summary>
            <param name="offset">the offset of the address data from the start of the 
            packet.
            </param>
            <param name="bytes">an array of bytes containing at least one MAC address.
            </param>
        </member>
        <member name="M:Tamir.IPLib.Packets.MACAddress.random">
            <summary> Generate a random MAC address.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.EthernetProtocols_Fields" -->
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.IP">
            <summary> IP protocol.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.ARP">
            <summary> Address resolution protocol.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.RARP">
            <summary> Reverse address resolution protocol.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.LOOP">
            <summary> Ethernet Loopback packet </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.ECHO">
            <summary> Ethernet Echo packet		</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.PUP">
            <summary> Xerox PUP packet</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.X25">
            <summary> CCITT X.25			</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.BPQ">
            <summary> G8BPQ AX.25 Ethernet Packet	[ NOT AN OFFICIALLY REGISTERED ID ] </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.DEC">
            <summary> DEC Assigned proto</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.DNA_DL">
            <summary> DEC DNA Dump/Load</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.DNA_RC">
            <summary> DEC DNA Remote Console</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.DNA_RT">
            <summary> DEC DNA Routing</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.LAT">
            <summary> DEC LAT</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.DIAG">
            <summary> DEC Diagnostics</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.CUST">
            <summary> DEC Customer use</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.SCA">
            <summary> DEC Systems Comms Arch</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.ATALK">
            <summary> Appletalk DDP </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.AARP">
            <summary> Appletalk AARP</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.IPX">
            <summary> IPX over DIX</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.IPV6">
            <summary> IPv6 over bluebook</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.N802_3">
            <summary> Dummy type for 802.3 frames  </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.AX25">
            <summary> Dummy protocol id for AX.25  </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.ALL">
            <summary> Every packet.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.N802_2">
            <summary> 802.2 frames</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.SNAP">
            <summary> Internal only</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.DDCMP">
            <summary> DEC DDCMP: Internal only</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.WAN_PPP">
            <summary> Dummy type for WAN PPP frames</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.PPP_MP">
            <summary> Dummy type for PPP MP frames </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.LOCALTALK">
            <summary> Localtalk pseudo type </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.PPPTALK">
            <summary> Dummy type for Atalk over PPP</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.TR_802_2">
            <summary> 802.2 frames</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.MOBITEX">
            <summary> Mobitex (kaz@cafe.net)</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.CONTROL">
            <summary> Card specific control frames</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.IRDA">
            <summary> Linux/IR</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetProtocols_Fields.MASK">
            <summary> Ethernet protocol mask.</summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.UDPFields_Fields">
            <summary> IP protocol field encoding information.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.3 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2001/06/27 01:47:00 $ </lastModifiedAt>
        </member>
        <member name="F:Tamir.IPLib.Packets.UDPFields_Fields.UDP_PORT_LEN">
            <summary> Length of a UDP port in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.UDPFields_Fields.UDP_LEN_LEN">
            <summary> Length of the header length field in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.UDPFields_Fields.UDP_CSUM_LEN">
            <summary> Length of the checksum field in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.UDPFields_Fields.UDP_SP_POS">
            <summary> Position of the source port.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.UDPFields_Fields.UDP_DP_POS">
            <summary> Position of the destination port.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.UDPFields_Fields.UDP_LEN_POS">
            <summary> Position of the header length.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.UDPFields_Fields.UDP_CSUM_POS">
            <summary> Position of the header checksum length.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.UDPFields_Fields.UDP_HEADER_LEN">
            <summary> Length of a UDP header in bytes.</summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.IGMPFields_Fields">
            <summary> IGMP protocol field encoding information.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.1 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2001/07/30 00:00:02 $ </lastModifiedAt>
        </member>
        <member name="F:Tamir.IPLib.Packets.IGMPFields_Fields.IGMP_CODE_LEN">
            <summary> Length of the IGMP message type code in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IGMPFields_Fields.IGMP_MRSP_LEN">
            <summary> Length of the IGMP max response code in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IGMPFields_Fields.IGMP_CSUM_LEN">
            <summary> Length of the IGMP header checksum in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IGMPFields_Fields.IGMP_GADDR_LEN">
            <summary> Length of group address in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IGMPFields_Fields.IGMP_CODE_POS">
            <summary> Position of the IGMP message type.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IGMPFields_Fields.IGMP_MRSP_POS">
            <summary> Position of the IGMP max response code.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IGMPFields_Fields.IGMP_CSUM_POS">
            <summary> Position of the IGMP header checksum.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IGMPFields_Fields.IGMP_GADDR_POS">
            <summary> Position of the IGMP group address.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IGMPFields_Fields.IGMP_HEADER_LEN">
            <summary> Length in bytes of an IGMP header.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.ICMPPacket" -->
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.IPPacket" -->
        <member name="M:Tamir.IPLib.Packets.IPPacket.#ctor(System.Int32,System.Byte[])">
            <summary> Create a new IP packet. </summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPPacket.#ctor(System.Int32,System.Byte[],Tamir.IPLib.Packets.Util.Timeval)">
            <summary> Create a new IP packet.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPPacket.SetChecksum(System.Int32,System.Int32)">
            <summary> Sets the IP header checksum.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPPacket._OnesCompSum(System.Byte[])">
            <summary> tamir: 
            Computes the one's complement sum on a byte array
            </summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPPacket._OnesCompSum(System.Byte[],System.Int32,System.Int32)">
            <summary> tamir: 
            Computes the one's complement sum on a byte array
            </summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPPacket._OnesSum(System.Byte[])">
            <summary> tamir:
            Computes the one's sum on a byte array.
            Based TCP/IP Illustrated Vol. 2(1995) by Gary R. Wright and W. Richard
            Stevens. Page 236. And on http://www.cs.utk.edu/~cs594np/unp/checksum.html
            </summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPPacket._OnesSum(System.Byte[],System.Int32,System.Int32)">
            <summary> tamir:
            Computes the one's sum on a byte array.
            Based TCP/IP Illustrated Vol. 2(1995) by Gary R. Wright and W. Richard
            Stevens. Page 236. And on http://www.cs.utk.edu/~cs594np/unp/checksum.html
            </summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPPacket.ComputeIPChecksum(System.Boolean)">
            <summary> Computes the IP checksum, optionally updating the IP checksum header.
            
            </summary>
            <param name="update">Specifies whether or not to update the IP checksum
            header after computing the checksum.  A value of true indicates
            the header should be updated, a value of false indicates it
            should not be updated.
            </param>
            <returns> The computed IP checksum.
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPPacket.ComputeIPChecksum">
            <summary> Same as <code>computeIPChecksum(true);</code>
            
            </summary>
            <returns> The computed IP checksum value.
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPPacket.GetTransportLayerChecksum(System.Int32)">
            <summary> Fetch the header checksum.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPPacket.ToString">
            <summary> Convert this IP packet to a readable string.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPPacket.ToColoredString(System.Boolean)">
            <summary> Generate string with contents describing this IP packet.</summary>
            <param name="colored">whether or not the string should contain ansi
            color escape sequences.
            </param>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPPacket.ToColoredVerboseString(System.Boolean)">
            <summary> Convert this IP packet to a more verbose string.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.Version">
            <summary> Get the IP version code.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.IPHeaderLength">
            <summary> Fetch the IP header length in bytes. </summary>
            <summary> Sets the IP header length field.  At most, this can be a 
            four-bit value.  The high order bits beyond the fourth bit
            will be ignored.
            
            </summary>
            <param name="length">The length of the IP header in 32-bit words.
            </param>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.HeaderLength">
            <summary> Fetch the packet IP header length.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.IpHeaderLength">
            <summary> Fetch the packet IP header length.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.Id">
            <summary> Fetch the unique ID of this IP datagram. The ID normally 
            increments by one each time a datagram is sent by a host.
            </summary>
            <summary> Sets the IP identification header value.
            
            </summary>
            <param name="id">A 16-bit unsigned integer.
            </param>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.FragmentOffset">
            <summary> Fetch fragmentation offset.</summary>
            <summary> Sets the fragment offset header value.  The offset specifies a
            number of octets (i.e., bytes).
            
            </summary>
            <param name="offset">A 13-bit unsigned integer.
            </param>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.SourceAddress">
            <summary> Fetch the IP address of the host where the packet originated from.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.SourceAddressbytes">
            <summary> Fetch the source address as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.DestinationAddress">
            <summary> Fetch the IP address of the host where the packet is destined.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.DestinationAddressAsLong">
            <summary> Fetch the destination address as a long.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.DestinationAddressbytes">
            <summary> Fetch the destination address as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.IPHeader">
            <summary> Fetch the IP header a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.Header">
            <summary> Fetch the IP header as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.IPData">
            <summary> Fetch the IP data as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.IPChecksum">
            <summary> Fetch the header checksum.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.ValidChecksum">
            <summary> Check if the IP packet is valid, checksum-wise.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.ValidIPChecksum">
            <summary> Check if the IP packet is valid, checksum-wise.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.Color">
            <summary> Fetch ascii escape sequence of the color associated with this packet type.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.TypeOfService">
            <summary> Fetch the type of service./// </summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.Length">
            <summary> Fetch the IP length in bytes.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.IPTotalLength">
            <summary> Fetch the IP length in bytes.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Tamir.IPLib.Packets.IPPacket.FragmentFlags" -->
        <member name="P:Tamir.IPLib.Packets.IPPacket.TimeToLive">
            <summary> Fetch the time to live. TTL sets the upper limit on the number of 
            routers through which this IP datagram is allowed to pass.
            </summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.IPProtocol">
            <summary> Fetch the code indicating the type of protocol embedded in the IP</summary>
            <seealso cref="!:IPProtocols.">
            </seealso>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.Data">
            <summary> Fetch the IP data as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IPPacket.Checksum">
            <summary> Fetch the IP header checksum.</summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.IPPacket.TestProbe">
            <summary> This inner class provides access to private methods for unit testing.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.ICMPPacket.ComputeICMPChecksum(System.Boolean)">
            <summary> Computes the ICMP checksum, optionally updating the ICMP checksum header.
            
            </summary>
            <param name="update">Specifies whether or not to update the ICMP checksum
            header after computing the checksum.  A value of true indicates
            the header should be updated, a value of false indicates it
            should not be updated.
            </param>
            <returns> The computed ICMP checksum.
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.ICMPPacket.ComputeICMPChecksum">
            <summary> Same as <code>computeICMPChecksum(true);</code>
            
            </summary>
            <returns> The computed ICMP checksum value.
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.ICMPPacket.ToString">
            <summary> Convert this ICMP packet to a readable string.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.ICMPPacket.ToColoredString(System.Boolean)">
            <summary> Generate string with contents describing this ICMP packet.</summary>
            <param name="colored">whether or not the string should contain ansi
            color escape sequences.
            </param>
        </member>
        <member name="P:Tamir.IPLib.Packets.ICMPPacket.ICMPHeader">
            <summary> Fetch the ICMP header a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ICMPPacket.Header">
            <summary> Fetch the ICMP header as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ICMPPacket.ICMPData">
            <summary> Fetch the ICMP data as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ICMPPacket.MessageMajorCode">
            <summary> Fetch the ICMP message type code. Formerly .getMessageType().</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ICMPPacket.MessageType">
            <deprecated> use getMessageMajorCode().
            </deprecated>
        </member>
        <member name="P:Tamir.IPLib.Packets.ICMPPacket.MessageCode">
            <summary> Fetch the ICMP message type, including subcode. Return value can be 
            used with ICMPMessage.getDescription().
            </summary>
            <returns> a 2-byte value containing the message type in the high byte
            and the message type subcode in the low byte.
            </returns>
        </member>
        <member name="P:Tamir.IPLib.Packets.ICMPPacket.MessageMinorCode">
            <summary> Fetch the ICMP message subcode.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ICMPPacket.ICMPChecksum">
            <summary> Fetch the ICMP header checksum.</summary>
            <summary> Sets the ICMP header checksum.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ICMPPacket.Color">
            <summary> Fetch ascii escape sequence of the color associated with this packet type.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ICMPPacket.Data">
            <summary> Fetch the ICMP data as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.ICMPPacket.Checksum">
            <summary> Fetch the ICMP header checksum.</summary>
        </member>
        <member name="T:Tamir.IPLib.PcapException">
            <summary>
            Summary description for PcapException.
            </summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.TCPFields_Fields">
            <summary> IP protocol field encoding information.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.5 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2003/10/29 02:38:27 $ </lastModifiedAt>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_PORT_LEN">
            <summary> Length of a TCP port in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_SEQ_LEN">
            <summary> Length of the sequence number in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_ACK_LEN">
            <summary> Length of the acknowledgment number in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_FLAG_LEN">
            <summary> Length of the header length and flags field in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_WIN_LEN">
            <summary> Length of the window size field in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_CSUM_LEN">
            <summary> Length of the checksum field in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_URG_LEN">
            <summary> Length of the urgent field in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_SP_POS">
            <summary> Position of the source port field.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_DP_POS">
            <summary> Position of the destination port field.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_SEQ_POS">
            <summary> Position of the sequence number field.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_ACK_POS">
            <summary> Position of the acknowledgment number field.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_FLAG_POS">
            <summary> Position of the header length and flags field.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_WIN_POS">
            <summary> Position of the window size field.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_CSUM_POS">
            <summary> Position of the checksum field.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_URG_POS">
            <summary> Position of the urgent pointer field.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.TCPFields_Fields.TCP_HEADER_LEN">
            <summary> Length in bytes of a TCP header.</summary>
        </member>
        <member name="T:Tamir.IPLib.NetworkDevice">
            <summary>
            Represents a physical Network Device on a Windows machine.
            </summary>
        </member>
        <member name="M:Tamir.IPLib.NetworkDevice.#ctor(System.String)">
            <summary>
            Constructs a new Network Device
            </summary>
            <param name="name">The name of the Network Device. The name can be
            either in 'pcap' format or 'iphelper' format.</param>
        </member>
        <member name="M:Tamir.IPLib.NetworkDevice.#ctor(Tamir.IPLib.SharpPcap.PCAP_IF)">
            <summary>
            Constructs a new Network Device based on a PCAP_IF struct.
            </summary>
        </member>
        <member name="M:Tamir.IPLib.NetworkDevice.#ctor(Tamir.IPLib.IPHelper.IP_ADAPTER_INFO)">
            <summary>
            Constructs a new Network Device based on a IP_ADAPTER_INFO struct.
            </summary>
        </member>
        <member name="M:Tamir.IPLib.NetworkDevice.ToString">
            <summary>
            Returns a string representaion of this Network Device
            </summary>
        </member>
        <member name="M:Tamir.IPLib.NetworkDevice.ToStringDetailed">
            <summary>
            Returns a detailed string representaion of this Network Device
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.Name">
            <summary>
            The name of this Network Device
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.Description">
            <summary>
            The Description of this Network Device
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.Index">
            <summary>
            Gets the device index of this network device
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.MacAddress">
            <summary>
            Gets a hex string representing the MAC (physical) Address of this 
            Network Device.
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.MacAddressBytes">
            <summary>
            Gets the MAC Address of this network device as a byte array.
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.IpAddress">
            <summary>
            Gets the main IP address of this network device
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.SubnetMask">
            <summary>
            Gets the subnet mask of the main IP address of this network device
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.IpAddressList">
            <summary>
            Gets a list of all IP addresses and subnet masks of this network device
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.DefaultGateway">
            <summary>
            Gets the primary default gateway of this network device
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.DefaultGatewayList">
            <summary>
            Gets a list of all default gateways on this network device
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.DhcpEnabled">
            <summary>
            Gets a status indicating whether DHCP is enabled on this network device
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.DhcpServer">
            <summary>
            Gets the IP Address of the DHCP Server of this network device
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.DhcpLeaseObtained">
            <summary>
            Gets the date/time of the DHCP lease
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.DhcpLeaseExpires">
            <summary>
            Gets the date/time of the DHCP expiration
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.WinsServerPrimary">
            <summary>
            Gets the primary WINS Server configured for this network device
            </summary>
        </member>
        <member name="P:Tamir.IPLib.NetworkDevice.WinsServerSecondary">
            <summary>
            Gets the secondary WINS Server configured for this network device
            </summary>
        </member>
        <member name="T:Tamir.IPLib.Version">
            <summary>
            Represent the current version of SharpPcap.
            </summary>
        </member>
        <member name="M:Tamir.IPLib.Version.GetVersionString">
            <summary>
            Returns the current version string of the SharpPcap library
            </summary>
            <returns>the current version string of the SharpPcap library</returns>
        </member>
        <member name="T:Tamir.IPLib.PcapSendQueue">
            <summary>
            Summary description for PcapSendQueue.
            </summary>
        </member>
        <member name="M:Tamir.IPLib.PcapSendQueue.#ctor(System.Int32)">
            <summary>
            Creates and allocates a new PcapSendQueue and 
            </summary>
            <param name="memSize">
            The maximun amount of memory (in bytes) 
            to allocate for the queue</param>
        </member>
        <member name="M:Tamir.IPLib.PcapSendQueue.Add(System.Byte[],Tamir.IPLib.SharpPcap.PCAP_PKTHDR)">
            <summary>
            Add a packet to this send queue. 
            </summary>
            <param name="packet">The packet bytes to add</param>
            <param name="pcapHdr">The pcap header of the packet</param>
            <returns>True if success, else false</returns>
        </member>
        <member name="M:Tamir.IPLib.PcapSendQueue.Add(System.Byte[],Tamir.IPLib.PcapHeader)">
            <summary>
            Add a packet to this send queue. 
            </summary>
            <param name="packet">The packet bytes to add</param>
            <param name="pcapHdr">The pcap header of the packet</param>
            <returns>True if success, else false</returns>
        </member>
        <member name="M:Tamir.IPLib.PcapSendQueue.Add(System.Byte[])">
            <summary>
            Add a packet to this send queue. 
            </summary>
            <param name="packet">The packet bytes to add</param>
            <returns>True if success, else false</returns>
        </member>
        <member name="M:Tamir.IPLib.PcapSendQueue.Add(Tamir.IPLib.Packets.Packet)">
            <summary>
            Add a packet to this send queue. 
            </summary>
            <param name="packet">The packet to add</param>
            <returns>True if success, else false</returns>
        </member>
        <member name="M:Tamir.IPLib.PcapSendQueue.Add(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add a packet to this send queue.
            </summary>
            <param name="packet">The packet to add</param>
            <param name="seconds">The 'seconds' part of the packet's timestamp</param>
            <param name="miliseconds">The 'microseconds' part of the packet's timestamp</param>
            <returns>True if success, else false</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Tamir.IPLib.PcapSendQueue.Transmit(Tamir.IPLib.PcapDevice,System.Boolean)" -->
        <member name="M:Tamir.IPLib.PcapSendQueue.Dispose">
            <summary>
            Destroy the send queue. 
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapSendQueue.CurrentLength">
            <summary>
            The current length in bytes of this queue
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.Util.AnsiEscapeSequences_Fields" -->
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.UDPPacket" -->
        <member name="M:Tamir.IPLib.Packets.UDPPacket.#ctor(System.Int32,System.Byte[])">
            <summary> Create a new UDP packet.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.UDPPacket.#ctor(System.Int32,System.Byte[],Tamir.IPLib.Packets.Util.Timeval)">
            <summary> Create a new UDP packet.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.UDPPacket.ComputeUDPChecksum(System.Boolean)">
            <summary> Computes the UDP checksum, optionally updating the UDP checksum header.
            
            </summary>
            <param name="update">Specifies whether or not to update the UDP checksum header
            after computing the checksum. A value of true indicates the
            header should be updated, a value of false indicates it should
            not be updated.
            </param>
            <returns> The computed UDP checksum.
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.UDPPacket.ToString">
            <summary> Convert this UDP packet to a readable string.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.UDPPacket.ToColoredString(System.Boolean)">
            <summary> Generate string with contents describing this UDP packet.</summary>
            <param name="colored">whether or not the string should contain ansi
            color escape sequences.
            </param>
        </member>
        <member name="P:Tamir.IPLib.Packets.UDPPacket.SourcePort">
            <summary> Fetch the port number on the source host.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.UDPPacket.DestinationPort">
            <summary> Fetch the port number on the target host.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.UDPPacket.UDPLength">
            <summary> Fetch the total length of the UDP packet, including header and
            data payload, in bytes.
            </summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.UDPPacket.UDPChecksum">
            <summary> Fetch the header checksum.</summary>
            <summary> Fetch the header checksum.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.UDPPacket.ValidChecksum">
            <summary> Check if the TCP packet is valid, checksum-wise.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.UDPPacket.UDPHeader">
            <summary> Fetch the UDP header a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.UDPPacket.Header">
            <summary> Fetch the UDP header as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.UDPPacket.UDPData">
            <summary> Fetch the UDP data as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.UDPPacket.Color">
            <summary> Fetch ascii escape sequence of the color associated with this packet type.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.UDPPacket.Length">
            <summary> Fetch the total length of the UDP packet, including header and
            data payload, in bytes.
            </summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.UDPPacket.Checksum">
            <summary> Fetch the header checksum.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.UDPPacket.Data">
            <summary> Fetch the UDP data as a byte array.</summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.TestCase">
            <summary>
            Summary description for TestCase.
            </summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.Test">
            <summary>
            Summary description for TestCase.
            </summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.IPVersions_Fields">
            <summary> Code constants for internet protocol versions.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.1 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2001/05/23 02:42:22 $ </lastModifiedAt>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPVersions_Fields.IPV4">
            <summary> Internet protocol version 4.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPVersions_Fields.IPV6">
            <summary> Internet protocol version 6.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.IGMPPacket" -->
        <member name="M:Tamir.IPLib.Packets.IGMPPacket.ToString">
            <summary> Convert this IGMP packet to a readable string.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.IGMPPacket.ToColoredString(System.Boolean)">
            <summary> Generate string with contents describing this IGMP packet.</summary>
            <param name="colored">whether or not the string should contain ansi
            color escape sequences.
            </param>
        </member>
        <member name="P:Tamir.IPLib.Packets.IGMPPacket.IGMPHeader">
            <summary> Fetch the IGMP header a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IGMPPacket.Header">
            <summary> Fetch the IGMP header as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IGMPPacket.IGMPData">
            <summary> Fetch the IGMP data as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IGMPPacket.MessageType">
            <summary> Fetch the IGMP message type, including subcode. Return value can be 
            used with IGMPMessage.getDescription().
            </summary>
            <returns> a 2-byte value containing the message type in the high byte
            and the message type subcode in the low byte.
            </returns>
        </member>
        <member name="P:Tamir.IPLib.Packets.IGMPPacket.MaxResponseTime">
            <summary> Fetch the IGMP max response time.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IGMPPacket.IGMPChecksum">
            <summary> Fetch the IGMP header checksum.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IGMPPacket.GroupAddress">
            <summary> Fetch the IGMP group address.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IGMPPacket.Color">
            <summary> Fetch ascii escape sequence of the color associated with this packet type.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IGMPPacket.Data">
            <summary> Fetch the IGMP data as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.IGMPPacket.Checksum">
            <summary> Fetch the IGMP header checksum.</summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.ICMPMessages_Fields">
            <summary> Code constants for ICMP message types.
            
            Taken originally from tcpdump/print-icmp.c
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.5 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2004/02/24 19:21:30 $ </lastModifiedAt>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.ECHO_REPLY">
            <summary> Echo reply.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.UNREACH_NET">
            <summary> Destination network unreachable.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.UNREACH_HOST">
            <summary> Destination host unreachable.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.UNREACH_PROTOCOL">
            <summary> Bad protocol.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.UNREACH_PORT">
            <summary> Bad port.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.UNREACH_NEEDFRAG">
            <summary> IP_DF caused drop.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.UNREACH_SRCFAIL">
            <summary> Src route failed.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.UNREACH_NET_UNKNOWN">
            <summary> Unknown network.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.UNREACH_HOST_UNKNOWN">
            <summary> Unknown host.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.UNREACH_ISOLATED">
            <summary> Src host isolated.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.UNREACH_NET_PROHIB">
            <summary> Network access prohibited.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.UNREACH_HOST_PROHIB">
            <summary> Host access prohibited.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.UNREACH_TOSNET">
            <summary> Bad TOS for net.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.UNREACH_TOSHOST">
            <summary> Bad TOS for host.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.SOURCE_QUENCH">
            <summary> Packet lost, slow down.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.REDIRECT_NET">
            <summary> Shorter route to network.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.REDIRECT_HOST">
            <summary> Shorter route to host.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.REDIRECT_TOSNET">
            <summary> Shorter route for TOS and network.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.REDIRECT_TOSHOST">
            <summary> Shorter route for TOS and host.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.ECHO">
            <summary> Echo request.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.ROUTER_ADVERT">
            <summary> router advertisement</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.ROUTER_SOLICIT">
            <summary> router solicitation</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.TIME_EXCEED_INTRANS">
            <summary> time exceeded in transit.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.TIME_EXCEED_REASS">
            <summary> time exceeded in reass.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.PARAM_PROB">
            <summary> ip header bad; option absent.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.TSTAMP">
            <summary> timestamp request </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.TSTAMP_REPLY">
            <summary> timestamp reply </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.IREQ">
            <summary> information request </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.IREQ_REPLY">
            <summary> information reply </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.MASK_REQ">
            <summary> address mask request </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.ICMPMessages_Fields.MASK_REPLY">
            <summary> address mask reply </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.TCPPacket" -->
        <member name="F:Tamir.IPLib.Packets.TCPPacket.serialVersionUID">
            <summary> </summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.TCPPacket.#ctor(System.Int32,System.Byte[])">
            <summary> Create a new TCP packet.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.TCPPacket.#ctor(System.Int32,System.Byte[],System.Boolean)">
            <summary> Create a new TCP packet.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.TCPPacket.#ctor(System.Int32,System.Byte[],Tamir.IPLib.Packets.Util.Timeval)">
            <summary> Create a new TCP packet.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.TCPPacket.ComputeTCPChecksum(System.Boolean)">
            <summary> Computes the TCP checksum, optionally updating the TCP checksum header.
            
            </summary>
            <param name="update">Specifies whether or not to update the TCP checksum header
            after computing the checksum. A value of true indicates the
            header should be updated, a value of false indicates it should
            not be updated.
            </param>
            <returns> The computed TCP checksum.
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.TCPPacket.ComputeTCPChecksum">
            <summary> Same as <code>computeTCPChecksum(true);</code>
            
            </summary>
            <returns> The computed TCP checksum value.
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.TCPPacket.getUrgentPointer">
            <summary> Fetch the urgent pointer.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.TCPPacket.setUrgentPointer(System.Int32)">
            <summary> Sets the urgent pointer.
            
            </summary>
            <param name="pointer">The urgent pointer value.
            </param>
        </member>
        <member name="M:Tamir.IPLib.Packets.TCPPacket.setData(System.Byte[])">
            <summary> Sets the data section of this tcp packet</summary>
            <param name="data">the data bytes
            </param>
        </member>
        <member name="M:Tamir.IPLib.Packets.TCPPacket.ToString">
            <summary> Convert this TCP packet to a readable string.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.TCPPacket.ToColoredString(System.Boolean)">
            <summary> Generate string with contents describing this TCP packet.</summary>
            <param name="colored">whether or not the string should contain ansi
            color escape sequences.
            </param>
        </member>
        <member name="M:Tamir.IPLib.Packets.TCPPacket.ToColoredVerboseString(System.Boolean)">
            <summary> Convert this TCP packet to a verbose.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.SourcePort">
            <summary> Fetch the port number on the source host.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.DestinationPort">
            <summary> Fetches the port number on the destination host.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.SequenceNumber">
            <summary> Fetch the packet sequence number.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.AcknowledgmentNumber">
            <summary>    Fetch the packet acknowledgment number.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.AcknowledgementNumber">
            <summary> Fetch the packet acknowledgment number. </summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.TCPHeaderLength">
            <summary> Fetch the TCP header length in bytes.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.TcpHeaderLength">
            <summary> Fetch the TCP header length in bytes.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.HeaderLength">
            <summary> Fetches the packet TCP header length.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.PayloadDataLength">
            <summary> Fetches the length of the payload data.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.WindowSize">
            <summary> Fetch the window size.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.TCPChecksum">
            <summary> Fetch the header checksum.</summary>
            <summary> Set the checksum of the TCP header</summary>
            <param name="cs">the checksum value
            </param>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.ValidChecksum">
            <summary> Check if the TCP packet is valid, checksum-wise.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.TCPPacketByteLength">
            <returns> The TCP packet length in bytes.  This is the size of the
            IP packet minus the size of the IP header.
            </returns>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.Urg">
            <summary> Check the URG flag, flag indicates if the urgent pointer is valid.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.Ack">
            <summary> Check the ACK flag, flag indicates if the ack number is valid.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.Psh">
            <summary> Check the PSH flag, flag indicates the receiver should pass the
            data to the application as soon as possible.
            </summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.Rst">
            <summary> Check the RST flag, flag indicates the session should be reset between
            the sender and the receiver.
            </summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.Syn">
            <summary> Check the SYN flag, flag indicates the sequence numbers should
            be synchronized between the sender and receiver to initiate
            a connection.
            </summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.Fin">
            <summary> Check the FIN flag, flag indicates the sender is finished sending.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.TCPHeader">
            <summary> Fetch the TCP header a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.Header">
            <summary> Fetch the TCP header as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.TCPData">
            <summary> Fetch the TCP data as a byte array.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.Color">
            <summary> Fetch ascii escape sequence of the color associated with this packet type.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.Checksum">
            <summary> Fetch the header checksum.</summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.TCPPacket.Data">
            <summary> Fetch the TCP data as a byte array.</summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.Util.SupportClass">
            <summary>
            Contains conversion support elements such as classes, interfaces and static methods.
            </summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.SupportClass.FileLength(System.IO.FileInfo)">
            <summary>
            Checks if the giving File instance is a directory or file, and returns his Length
            </summary>
            <param name="file">The File instance to check</param>
            <returns>The length of the file</returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.SupportClass.GetFileStream(System.String,System.Boolean)">
            <summary>
            Creates an output file stream to write to the file with the specified name.
            </summary>
            <param name="FileName">Name of the file to write.</param>
            <param name="Append">True in order to write to the end of the file, false otherwise.</param>
            <returns>New instance of FileStream with the proper file mode.</returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.SupportClass.ToByteArray(System.Object[])">
            <summary>
            Converts a array of object-type instances to a byte-type array.
            </summary>
            <param name="tempObjectArray">Array to convert.</param>
            <returns>An array of byte type elements.</returns>
        </member>
        <member name="T:Tamir.IPLib.Packets.Util.SupportClass.Tokenizer">
            <summary>
            The class performs token processing in strings
            </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.Util.SupportClass.Tokenizer.currentPos">
            Position over the string
        </member>
        <member name="F:Tamir.IPLib.Packets.Util.SupportClass.Tokenizer.includeDelims">
            Include demiliters in the results.
        </member>
        <member name="F:Tamir.IPLib.Packets.Util.SupportClass.Tokenizer.chars">
            Char representation of the String to tokenize.
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.SupportClass.Tokenizer.#ctor(System.String)">
            <summary>
            Initializes a new class instance with a specified string to process
            </summary>
            <param name="source">String to tokenize</param>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.SupportClass.Tokenizer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new class instance with a specified string to process
            and the specified token delimiters to use
            </summary>
            <param name="source">String to tokenize</param>
            <param name="delimiters">String containing the delimiters</param>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.SupportClass.Tokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new class instance with a specified string to process, the specified token 
            delimiters to use, and whether the delimiters must be included in the results.
            </summary>
            <param name="source">String to tokenize</param>
            <param name="delimiters">String containing the delimiters</param>
            <param name="includeDelims">Determines if delimiters are included in the results.</param>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.SupportClass.Tokenizer.NextToken">
            <summary>
            Returns the next token from the token list
            </summary>
            <returns>The string value of the token</returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.SupportClass.Tokenizer.NextToken(System.String)">
            <summary>
            Returns the next token from the source string, using the provided
            token delimiters
            </summary>
            <param name="delimiters">String containing the delimiters to use</param>
            <returns>The string value of the token</returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.SupportClass.Tokenizer.HasMoreTokens">
            <summary>
            Determines if there are more tokens to return from the source string
            </summary>
            <returns>True or false, depending if there are more tokens</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Tamir.IPLib.Packets.Util.SupportClass.Tokenizer.MoveNext" -->
        <member name="M:Tamir.IPLib.Packets.Util.SupportClass.Tokenizer.Reset">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.Util.SupportClass.Tokenizer.Count">
            <summary>
            Remaining tokens count
            </summary>
        </member>
        <member name="P:Tamir.IPLib.Packets.Util.SupportClass.Tokenizer.Current">
            <summary>
             Performs the same action as NextToken.
            </summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.IGMPMessage">
            <summary> IGMP message utility class.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.1 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2001/07/30 00:00:02 $ </lastModifiedAt>
        </member>
        <member name="M:Tamir.IPLib.Packets.IGMPMessage.getDescription(System.Int32)">
            <summary> Fetch an IGMP message.</summary>
            <param name="code">the code associated with the message.
            </param>
            <returns> a message describing the significance of the IGMP code.
            </returns>
        </member>
        <member name="F:Tamir.IPLib.Packets.IGMPMessage.messages">
            <summary> 'Human-readable' IGMP messages.</summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.Util.PropertyHelper">
            <summary> Property helper utility methods.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.3 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2004/02/24 17:59:20 $ </lastModifiedAt>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Tamir.IPLib.Packets.Util.PropertyHelper.getFloatProperty(System.Collections.Specialized.NameValueCollection,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Tamir.IPLib.Packets.Util.PropertyHelper.getIntProperty(System.Collections.Specialized.NameValueCollection,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Tamir.IPLib.Packets.Util.PropertyHelper.getColorProperty(System.Collections.Specialized.NameValueCollection,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Tamir.IPLib.Packets.Util.PropertyHelper.getIpProperty(System.Collections.Specialized.NameValueCollection,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:Tamir.IPLib.Packets.Util.PropertyHelper.getBooleanProperty(System.Collections.Specialized.NameValueCollection,System.Object)" -->
        <member name="M:Tamir.IPLib.Packets.Util.PropertyHelper.refresh(System.String,System.IO.FileStream)">
            <summary> Refresh property settings from disk.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.PropertyHelper.load(System.String[],System.String)">
            <summary> Load the specified properties file from one of the specified set of 
            paths.
            
            </summary>
            <param name="paths">an array of strings containing target paths.
            </param>
            <param name="fileName">the name of the property file.
            </param>
            <returns> a populated set of properties loaded from the first file 
            found in the set of supplied paths. If no property file is found, 
            returns null.
            </returns>
        </member>
        <member name="T:Tamir.IPLib.Packets.IPProtocol">
            <summary> IPProtocol utility class.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.5 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2004/02/24 19:21:31 $ </lastModifiedAt>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPProtocol.getDescription(System.Int32)">
            <summary> Fetch a protocol description.</summary>
            <param name="code">the code associated with the message.
            </param>
            <returns> a message describing the significance of the IP protocol.
            </returns>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocol.messages">
            <summary> 'Human-readable' IP protocol descriptions.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPProtocol.extractProtocol(System.Int32,System.Byte[])">
            <summary> Extract the protocol code from packet data. The packet data 
            must contain an IP datagram.
            The protocol code specifies what kind of information is contained in the 
            data block of the ip datagram.
            
            </summary>
            <param name="lLen">the length of the link-level header.
            </param>
            <param name="packetBytes">packet bytes, including the link-layer header.
            </param>
            <returns> the IP protocol code. i.e. 0x06 signifies TCP protocol.
            </returns>
        </member>
        <member name="T:Tamir.IPLib.Packets.IGMPMessages_Fields">
            <summary> Code constants for IGMP message types.
            
            From RFC #2236.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.1 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2001/07/30 00:00:02 $ </lastModifiedAt>
        </member>
        <member name="F:Tamir.IPLib.Packets.IGMPMessages_Fields.QUERY">
            <summary> membership query.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IGMPMessages_Fields.V1_REPORT">
            <summary> v1 membership report.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IGMPMessages_Fields.V2_REPORT">
            <summary> v2 membership report.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IGMPMessages_Fields.LEAVE">
            <summary> Leave group.</summary>
        </member>
        <member name="T:Tamir.IPLib.Util.Convert">
            <summary>
            Summary description for Util.
            </summary>
        </member>
        <member name="M:Tamir.IPLib.Util.Convert.MaskStringToBits(System.String)">
            <summary>
            Converts a network mask string represntation into an integer representing the number of network bits
            </summary>
        </member>
        <member name="M:Tamir.IPLib.Util.Convert.Time_T2DateTime(System.UInt32)">
            <summary>
            Converts a time_t to DateTime
            </summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.IPFields_Fields">
            <summary> IP protocol field encoding information.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.4 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2001/06/27 01:46:59 $ </lastModifiedAt>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_VER_LEN">
            <summary> Width of the IP version and header length field in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_TOS_LEN">
            <summary> Width of the TOS field in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_LEN_LEN">
            <summary> Width of the header length field in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_ID_LEN">
            <summary> Width of the ID field in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_FRAG_LEN">
            <summary> Width of the fragmentation bits and offset field in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_TTL_LEN">
            <summary> Width of the TTL field in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_CODE_LEN">
            <summary> Width of the IP protocol code in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_CSUM_LEN">
            <summary> Width of the IP checksum in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_VER_POS">
            <summary> Position of the version code and header length within the IP header.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_TOS_POS">
            <summary> Position of the type of service code within the IP header.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_LEN_POS">
            <summary> Position of the length within the IP header.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_ID_POS">
            <summary> Position of the packet ID within the IP header.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_FRAG_POS">
            <summary> Position of the flag bits and fragment offset within the IP header.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_TTL_POS">
            <summary> Position of the ttl within the IP header.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_CODE_POS">
            <summary> Position of the IP protocol code within the IP header.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_CSUM_POS">
            <summary> Position of the checksum within the IP header.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_SRC_POS">
            <summary> Position of the source IP address within the IP header.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_DST_POS">
            <summary> Position of the destination IP address within a packet.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPFields_Fields.IP_HEADER_LEN">
            <summary> Length in bytes of an IP header, excluding options.</summary>
        </member>
        <member name="T:Tamir.IPLib.PcapHeader">
            <summary>
             A wrapper class for libpcap's PCAP_PKTHDR structure
            </summary>
        </member>
        <member name="F:Tamir.IPLib.PcapHeader.m_pcap_pkthdr">
            <summary>
            The underlying PCAP_PKTHDR structure
            </summary>
        </member>
        <member name="M:Tamir.IPLib.PcapHeader.#ctor">
            <summary>
            Constructs a new PcapHeader
            </summary>
        </member>
        <member name="M:Tamir.IPLib.PcapHeader.#ctor(Tamir.IPLib.SharpPcap.PCAP_PKTHDR)">
            <summary>
            Constructs a new PcapHeader
            </summary>
            <param name="m_pcap_pkthdr">The underlying PCAP_PKTHDR structure</param>
        </member>
        <member name="M:Tamir.IPLib.PcapHeader.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new PcapHeader
            </summary>
            <param name="seconds">The seconds value of the packet's timestamp</param>
            <param name="microseconds">The microseconds value of the packet's timestamp</param>
            <param name="packetLength">The actual length of the packet</param>
            <param name="captureLength">The length of the capture</param>
        </member>
        <member name="P:Tamir.IPLib.PcapHeader.Seconds">
            <summary>
            The seconds value of the packet's timestamp
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapHeader.MicroSeconds">
            <summary>
            The microseconds value of the packet's timestamp
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapHeader.PacketLength">
            <summary>
            The actual length of the packet
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapHeader.CaptureLength">
            <summary>
            The length of the capture
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapHeader.Date">
            <summary>
            Return the DateTime value of this pcap header
            </summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.Util.HexHelper">
            <summary> Functions for formatting and printing binary data in hexadecimal.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.3 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2001/06/04 05:07:06 $ </lastModifiedAt>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.HexHelper.toQuadString(System.Int32)">
            <summary> Convert an int (32 bits in Java) to a decimal quad of the form
            aaa.bbb.ccc.ddd.
            </summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.HexHelper.toString(System.Int32)">
            <summary> Convert an int to a hexadecimal string.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.HexHelper.nibbleToDigit(System.Byte)">
            <summary> Converts the lower four bits of a byte into the ascii digit 
            which represents its hex value. For example:
            nibbleToDigit(10) produces 'a'.
            </summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.HexHelper.toString(System.Byte)">
            <summary> Convert a single byte into a string representing its hex value.
            i.e. -1 -> "ff"
            </summary>
            <param name="b">the byte to convert.
            </param>
            <returns> a string containing the hex equivalent.
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.HexHelper.toString(System.Byte[])">
            <summary> Returns a text representation of a byte array.
            
            </summary>
            <param name="bytes">a byte array
            </param>
            <returns> a string containing the hex equivalent of the bytes.
            </returns>
        </member>
        <member name="T:Tamir.IPLib.Packets.IPPort">
            <summary> IP port utility class.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.4 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2004/02/24 19:21:30 $ </lastModifiedAt>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPPort.getDescription(System.Int32)">
            <summary> Fetch a well-known IP port description.</summary>
            <param name="port">the port associated with the description.
            </param>
            <returns> a description of the ip port.
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.IPPort.getName(System.Int32)">
            <summary> Fetch a well-known IP port name.</summary>
            <param name="port">the port associated with the name.
            </param>
            <returns> the name of the ip port.
            </returns>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPPort.descriptions">
            <summary> 'Human-readable' IP port descriptions.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPPort.names">
            <summary> 'Human-readable' TCP port names.</summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.EthernetFields_Fields">
            <summary> Ethernet protocol field encoding information.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.3 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2001/06/27 02:14:54 $ </lastModifiedAt>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetFields_Fields.ETH_CODE_LEN">
            <summary> Width of the ethernet type code in bytes.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetFields_Fields.ETH_DST_POS">
            <summary> Position of the destination MAC address within the ethernet header.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetFields_Fields.ETH_SRC_POS">
            <summary> Position of the source MAC address within the ethernet header.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetFields_Fields.ETH_CODE_POS">
            <summary> Position of the ethernet type field within the ethernet header.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.EthernetFields_Fields.ETH_HEADER_LEN">
            <summary> Total length of an ethernet header in bytes.</summary>
        </member>
        <member name="T:Tamir.IPLib.NetworkDeviceList">
            <summary>
            Summary description for NetworkDeviceList.
            </summary>
        </member>
        <member name="T:Tamir.IPLib.PcapStatistics">
            <summary>
            Holds network statistics for a Pcap Devices
            </summary>
        </member>
        <member name="F:Tamir.IPLib.PcapStatistics.m_pktHdr">
            <summary>
            This holds time value
            </summary>
        </member>
        <member name="F:Tamir.IPLib.PcapStatistics.m_pktData">
            <summary>
            This holds byte received and packets received
            </summary>
        </member>
        <member name="M:Tamir.IPLib.PcapStatistics.#ctor(Tamir.IPLib.SharpPcap.PCAP_PKTHDR,Tamir.IPLib.SharpPcap.PCAP_PKTDATA)">
            <summary>
            Constructs a new Pcap Statistics strcuture
            </summary>
            <param name="pktHdr">Time value as PCAP_PKTHDR</param>
            <param name="pktData">Statistics values as PCAP_PKTDATA</param>
        </member>
        <member name="P:Tamir.IPLib.PcapStatistics.RecievedPackets">
            <summary>
            Number of packets received since last sample
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapStatistics.RecievedBytes">
            <summary>
            Number of bytes received since last sample
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapStatistics.Seconds">
            <summary>
            The 'Seconds' part of the timestamp
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapStatistics.MicroSeconds">
            <summary>
            The 'MicroSeconds' part of the timestamp
            </summary>
        </member>
        <member name="P:Tamir.IPLib.PcapStatistics.Date">
            <summary>
            The timestamps
            </summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.Util.AsciiHelper">
            <summary> Functions for formatting and printing binary data as ascii.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.1 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2001/06/14 21:19:58 $ </lastModifiedAt>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.AsciiHelper.toText(System.Byte[])">
            <summary> Returns a text representation of a byte array.
            Bytes in the array which don't convert to text in the range a..Z
            are dropped.
            
            </summary>
            <param name="bytes">a byte array
            </param>
            <returns> a string containing the text equivalent of the bytes.
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.AsciiHelper.toString(System.Byte[])">
            <summary> Returns a text representation of a byte array.
            Bytes in the array which don't convert to printable ascii characters
            are dropped.
            
            </summary>
            <param name="bytes">a byte array
            </param>
            <returns> a string containing the ascii equivalent of the bytes.
            </returns>
        </member>
        <member name="T:Tamir.IPLib.Packets.EthernetProtocol">
            <summary> Ethernet protocol utility class.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.3 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2001/06/27 01:50:42 $ </lastModifiedAt>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Tamir.IPLib.Packets.EthernetProtocol.extractProtocol(System.Byte[])" -->
        <member name="T:Tamir.IPLib.IPHelper">
            <summary>
            Summary description for IPHelper.
            </summary>
        </member>
        <member name="M:Tamir.IPLib.IPHelper.GetAdapterInfo(System.String)">
            <summary>
            Returns an IP_ADAPTER_INFO struct that represents a network adapter on this machine
            </summary>
        </member>
        <member name="M:Tamir.IPLib.IPHelper.GetAllDevices">
            <summary>
            Return all network devices available on this machine through the IPHelper API
            </summary>
        </member>
        <member name="T:Tamir.IPLib.IPHelper.INTF_ROW">
            <summary>
            Represent a row in an INTF_TABLE (Interfaces Table)
            </summary>
        </member>
        <member name="T:Tamir.IPLib.IPHelper.MAC_ADDR_ARRAY">
            <summary>
            MAC_ADDR_ARR struct for "iphlpapi.dll" invocation.
            </summary>
        </member>
        <member name="T:Tamir.IPLib.IPHelper.IPADDR">
            <summary>
            Represent a row in an IP address
            </summary>
        </member>
        <member name="T:Tamir.IPLib.IPHelper.IPMASK">
            <summary>
            Represent a row in an IP mask
            </summary>
        </member>
        <member name="T:Tamir.IPLib.IPHelper.IP_ADDRESS_STRING">
            <summary>
            IP_ADDRESS_STRING struct for "iphlpapi.dll" invocation.
            </summary>
        </member>
        <member name="T:Tamir.IPLib.IPHelper.IP_MASK_STRING">
            <summary>
            IP_MASK_STRING struct for "iphlpapi.dll" invocation.
            </summary>
        </member>
        <member name="T:Tamir.IPLib.IPHelper.IP_ADDR_STRING">
            <summary>
            IP_ADDR_STRING struct for "iphlpapi.dll" invocation.
            </summary>
        </member>
        <member name="T:Tamir.IPLib.IPAddress">
             <summary>
            Represent an IP Address and a Subnet Mask.
            This struct hold two parameters:
            address -  string of the IP Address
            mask - a string of the subnet mask
             </summary>
        </member>
        <member name="P:Tamir.IPLib.IPAddress.Address">
            <summary>
            IP Address
            </summary>
        </member>
        <member name="P:Tamir.IPLib.IPAddress.Mask">
            <summary>
            Subnet Mask
            </summary>
        </member>
        <member name="T:Tamir.IPLib.IPAddressList">
            <summary>
            Summary description for IPAddressList.
            </summary>
        </member>
        <member name="T:Tamir.IPLib.SharpPcap">
            <summary>
            Summary description for SharpPcap.
            </summary>
        </member>
        <member name="F:Tamir.IPLib.SharpPcap.INFINITE">
            <summary>Represents the infinite number for packet captures </summary>
        </member>
        <member name="F:Tamir.IPLib.SharpPcap.PCAP_NAME_PREFIX">
            <summary>A string value that prefixes avery pcap device name </summary>
        </member>
        <member name="M:Tamir.IPLib.SharpPcap.pcap_findalldevs_ex(System.String,System.IntPtr,System.IntPtr@,System.Text.StringBuilder)">
            <summary>Create a list of network devices that can be opened with pcap_open().</summary>
        </member>
        <member name="M:Tamir.IPLib.SharpPcap.pcap_dump_open(System.IntPtr,System.String)">
            <summary>Open a file to write packets. </summary>
        </member>
        <member name="M:Tamir.IPLib.SharpPcap.pcap_dump(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
             Save a packet to disk.  
            </summary>
        </member>
        <member name="M:Tamir.IPLib.SharpPcap.pcap_close(System.IntPtr)">
            <summary> close the files associated with p and deallocates resources.</summary>
        </member>
        <member name="M:Tamir.IPLib.SharpPcap.pcap_next_ex(System.IntPtr,System.IntPtr@,System.IntPtr@)">
            <summary>
            To avoid callback, this returns one packet at a time
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Tamir.IPLib.SharpPcap.pcap_sendpacket(System.IntPtr,System.IntPtr,System.Int32)" -->
        <member name="M:Tamir.IPLib.SharpPcap.pcap_sendqueue_alloc(System.Int32)">
            <summary>
            Allocate a send queue. 
            </summary>
            <param name="memsize">The size of the queue</param>
            <returns>A pointer to the allocated buffer</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Tamir.IPLib.SharpPcap.pcap_sendqueue_destroy(System.IntPtr)" -->
        <member name="M:Tamir.IPLib.SharpPcap.pcap_sendqueue_queue(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Add a packet to a send queue. 
            </summary>
            <param name="queue">A pointer to a queue</param>
            <param name="header">The pcap header of the packet to send</param>
            <param name="data">The packet data</param>
        </member>
        <member name="M:Tamir.IPLib.SharpPcap.pcap_sendqueue_transmit(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Send a queue of raw packets to the network. 
            </summary>
            <param name="p"></param>
            <param name="queue"></param>
            <param name="sync">determines if the send operation must be synchronized: 
            if it is non-zero, the packets are sent respecting the timestamps, 
            otherwise they are sent as fast as possible</param>
            <returns>The amount of bytes actually sent. 
            If it is smaller than the size parameter, an error occurred 
            during the send. The error can be caused by a driver/adapter 
            problem or by an inconsistent/bogus send queue.</returns>
        </member>
        <member name="M:Tamir.IPLib.SharpPcap.pcap_compile(System.IntPtr,System.IntPtr,System.String,System.Int32,System.UInt32)">
            <summary>
            Compile a packet filter, converting an high level filtering expression (see Filtering expression syntax) in a program that can be interpreted by the kernel-level filtering engine. 
            </summary>
        </member>
        <member name="M:Tamir.IPLib.SharpPcap.pcap_geterr(System.IntPtr)">
            <summary>
            return the error text pertaining to the last pcap library error.
            </summary>
        </member>
        <member name="M:Tamir.IPLib.SharpPcap.pcap_lib_version">
            <summary>Returns a pointer to a string giving information about the version of the libpcap library being used; note that it contains more information than just a version number. </summary>
        </member>
        <member name="M:Tamir.IPLib.SharpPcap.pcap_dump_file(System.IntPtr)">
            <summary>return the standard I/O stream of the 'savefile' opened by pcap_dump_open().</summary>
        </member>
        <member name="M:Tamir.IPLib.SharpPcap.pcap_dump_flush(System.IntPtr)">
            <summary>Flushes the output buffer to the 'savefile', so that any packets 
            written with pcap_dump() but not yet written to the 'savefile' will be written. 
            -1 is returned on error, 0 on success. </summary>
        </member>
        <member name="M:Tamir.IPLib.SharpPcap.pcap_dump_close(System.IntPtr)">
            <summary>Closes a savefile. </summary>
        </member>
        <member name="M:Tamir.IPLib.SharpPcap.pcap_datalink(System.IntPtr)">
            <summary> Return the link layer of an adapter. </summary>
        </member>
        <member name="M:Tamir.IPLib.SharpPcap.pcap_setmode(System.IntPtr,System.Int32)">
            <summary>
            Set the working mode of the interface p to mode. 
            Valid values for mode are MODE_CAPT (default capture mode) 
            and MODE_STAT (statistical mode). See the tutorial 
            "\ref wpcap_tut9" for details about statistical mode. 
            </summary>
        </member>
        <member name="M:Tamir.IPLib.SharpPcap.GetAllDevices">
            <summary>
            Returns all pcap network devices available on this machine.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Tamir.IPLib.SharpPcap.GetPcapDeviceStruct(System.String)" -->
        <member name="T:Tamir.IPLib.SharpPcap.PacketArrivalEvent">
            <summary>A delegate for Packet Arrival events</summary>
        </member>
        <member name="T:Tamir.IPLib.SharpPcap.PcapStatisticsEvent">
            <summary>
            A delegate for delivering network statistics
            </summary>
        </member>
        <member name="T:Tamir.IPLib.SharpPcap.PcapCaptureStoppedEvent">
            <summary>
            A delegate fornotifying of a capture stopped event
            </summary>
        </member>
        <member name="T:Tamir.IPLib.SharpPcap.PcapHandler">
            <summary>
            From some reason the Callback inplementation doesn't work.
            It fires for one time and then throws null pointer exception
            </summary>
        </member>
        <member name="T:Tamir.IPLib.SharpPcap.PCAP_IF">
            <summary>
            Item in a list of interfaces.
            </summary>
        </member>
        <member name="T:Tamir.IPLib.SharpPcap.PCAP_ADDR">
            <summary>
            Representation of an interface address.
            </summary>
        </member>
        <member name="T:Tamir.IPLib.SharpPcap.SOCKADDR">
            <summary>
            Structure used by kernel to store most addresses.
            </summary>
        </member>
        <member name="T:Tamir.IPLib.SharpPcap.PCAP_PKTHDR">
            <summary>
            Each packet in the dump file is prepended with this generic header.
            This gets around the problem of different headers for different
            packet interfaces.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Tamir.IPLib.SharpPcap.PCAP_PKTHDR.tv_usec" -->
        <!-- Badly formed XML comment ignored for member "F:Tamir.IPLib.SharpPcap.PCAP_PKTHDR.caplen" -->
        <member name="T:Tamir.IPLib.SharpPcap.PCAP_PKTDATA">
            <summary>
            Packet data bytes
            </summary>
        </member>
        <member name="T:Tamir.IPLib.SharpPcap.bpf_program">
            <summary>
            A BPF pseudo-assembly program for packet filtering
            </summary>
        </member>
        <member name="T:Tamir.IPLib.SharpPcap.pcap_send_queue">
            <summary>
            A queue of raw packets that will be sent to the network with pcap_sendqueue_transmit()
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.Util.Timeval" -->
        <member name="P:Tamir.IPLib.Packets.Util.Timeval.Date">
            <summary> Convert this timeval to a java Date.</summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.LinkLayer">
            <summary> Information about network link layers.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.5 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2001/07/02 04:02:57 $ </lastModifiedAt>
        </member>
        <member name="M:Tamir.IPLib.Packets.LinkLayer.getLinkLayerLength(System.Int32)">
            <summary> Fetch the header length associated with various link-layer types.</summary>
            <param name="layerType">the link-layer code
            </param>
            <returns> the length of the header for the specified link-layer
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.LinkLayer.getProtoOffset(System.Int32)">
            <summary> Fetch the offset into the link-layer header where the protocol code
            can be found. Returns -1 if there is no embedded protocol code.
            </summary>
            <param name="layerType">the link-layer code
            </param>
            <returns> the offset in bytes
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.LinkLayer.getDescription(System.Int32)">
            <summary> Fetch a link-layer type description.</summary>
            <param name="code">the code associated with the description.
            </param>
            <returns> a description of the link-layer type.
            </returns>
        </member>
        <member name="F:Tamir.IPLib.Packets.LinkLayer.descriptions">
            <summary> 'Human-readable' link-layer type descriptions.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.IPProtocols_Fields" -->
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.IP">
            <summary> Dummy protocol for TCP. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.HOPOPTS">
            <summary> IPv6 Hop-by-Hop options. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.ICMP">
            <summary> Internet Control Message Protocol. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.IGMP">
            <summary> Internet Group Management Protocol.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.IPIP">
            <summary> IPIP tunnels (older KA9Q tunnels use 94). </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.TCP">
            <summary> Transmission Control Protocol. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.EGP">
            <summary> Exterior Gateway Protocol. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.PUP">
            <summary> PUP protocol. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.UDP">
            <summary> User Datagram Protocol. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.IDP">
            <summary> XNS IDP protocol. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.TP">
            <summary> SO Transport Protocol Class 4. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.IPV6">
            <summary> IPv6 header. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.ROUTING">
            <summary> IPv6 routing header. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.FRAGMENT">
            <summary> IPv6 fragmentation header. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.RSVP">
            <summary> Reservation Protocol. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.GRE">
            <summary> General Routing Encapsulation. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.ESP">
            <summary> encapsulating security payload. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.AH">
            <summary> authentication header. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.ICMPV6">
            <summary> ICMPv6. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.NONE">
            <summary> IPv6 no next header. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.DSTOPTS">
            <summary> IPv6 destination options. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.MTP">
            <summary> Multicast Transport Protocol. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.ENCAP">
            <summary> Encapsulation Header. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.PIM">
            <summary> Protocol Independent Multicast. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.COMP">
            <summary> Compression Header Protocol. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.RAW">
            <summary> Raw IP packets. </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.INVALID">
            <summary> Unrecognized IP protocol.
            WARNING: this only works because the int storage for the protocol
            code has more bits than the field in the IP header where it is stored.
            </summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPProtocols_Fields.MASK">
            <summary> IP protocol mask.</summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.IPPorts_Fields">
            <summary> Code constants for ip ports.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.4 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2004/02/24 19:21:31 $ </lastModifiedAt>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPPorts_Fields.LIMIT_PRIVILEGED">
            <summary> Number of well-known (aka privileged) ports.</summary>
        </member>
        <member name="F:Tamir.IPLib.Packets.IPPorts_Fields.MASK">
            <summary> IP port mask.</summary>
        </member>
        <member name="T:Tamir.IPLib.PcapMode">
            <summary>
            The working mode of a Pcap device
            </summary>
        </member>
        <member name="F:Tamir.IPLib.PcapMode.Capture">
            <summary>
            Set a Pcap device to Capture mode (MODE_CAPT)
            </summary>
        </member>
        <member name="F:Tamir.IPLib.PcapMode.Statistics">
            <summary>
            Set a Pcap device to Statistics mode (MODE_STAT)
            </summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.Util.FileUtility">
            <summary> Writes data in tcpdump format
            
            </summary>
            <author>  Joyce Lin
            </author>
            <version>  $Revision: 1.1 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2004/09/28 17:31:38 $ </lastModifiedAt>
            <summary> 
            </summary>
        </member>
        <member name="T:Tamir.IPLib.Packets.Util.ArrayHelper">
            <summary> Utility functions for populating and manipulating arrays.
            
            </summary>
            <author>  Patrick Charles and Jonas Lehmann
            </author>
            <version>  $Revision: 1.9 $
            </version>
            <lastModifiedBy>  $Author: pcharles $ </lastModifiedBy>
            <lastModifiedAt>  $Date: 2004/09/28 17:31:37 $ </lastModifiedAt>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.ArrayHelper.join(System.Byte[],System.Byte[])">
            <summary> Join two arrays.</summary>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.ArrayHelper.extractLong(System.Byte[],System.Int32,System.Int32)">
            <summary> Extract a long from a byte array.
            
            </summary>
            <param name="bytes">an array.
            </param>
            <param name="pos">the starting position where the integer is stored.
            </param>
            <param name="cnt">the number of bytes which contain the integer.
            </param>
            <returns> the long, or <b>0</b> if the index/length to use 
            would cause an ArrayOutOfBoundsException
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.ArrayHelper.extractInteger(System.Byte[],System.Int32,System.Int32)">
            <summary> Extract an integer from a byte array.
            
            </summary>
            <param name="bytes">an array.
            </param>
            <param name="pos">the starting position where the integer is stored.
            </param>
            <param name="cnt">the number of bytes which contain the integer.
            </param>
            <returns> the integer, or <b>0</b> if the index/length to use 
            would cause an ArrayOutOfBoundsException
            </returns>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.ArrayHelper.insertLong(System.Byte[],System.Int64,System.Int32,System.Int32)">
            <summary> Insert data contained in a long integer into an array.
            
            </summary>
            <param name="bytes">an array.
            </param>
            <param name="value">the long to insert into the array.
            </param>
            <param name="pos">the starting position into which the long is inserted.
            </param>
            <param name="cnt">the number of bytes to insert.
            </param>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.ArrayHelper.toBytes(System.Int64,System.Int32)">
            <summary> Convert a long integer into an array of bytes.
            
            </summary>
            <param name="value">the long to convert.
            </param>
            <param name="cnt">the number of bytes to convert.
            </param>
        </member>
        <member name="M:Tamir.IPLib.Packets.Util.ArrayHelper.toBytesLittleEndian(System.Int64,System.Int32)">
            <summary> Convert a long integer into an array of bytes, little endian format. 
            (i.e. this does the same thing as toBytes() but returns an array 
            in reverse order from the array returned in toBytes().
            </summary>
            <param name="value">the long to convert.
            </param>
            <param name="cnt">the number of bytes to convert.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Tamir.IPLib.Packets.TypesOfService_Fields" -->
    </members>
</doc>
